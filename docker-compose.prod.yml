version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:16
    container_name: veille-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-veille_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-veille_password}
      POSTGRES_DB: ${POSTGRES_DB:-veille_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init:/docker-entrypoint-initdb.d
    networks:
      - veille-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-veille_user} -d ${POSTGRES_DB:-veille_db}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # NextJS application
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: veille-app
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-veille_user}:${POSTGRES_PASSWORD:-veille_password}@postgres:5432/${POSTGRES_DB:-veille_db}
      - NODE_ENV=production
      - GOOGLE_GENAI_API_KEY=${GOOGLE_GENAI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - ELEVENLABS_EN_VOICE_ID=${ELEVENLABS_EN_VOICE_ID}
      - ELEVENLABS_FR_VOICE_ID=${ELEVENLABS_FR_VOICE_ID}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - TELEGRAM_BATCH_SIZE=${TELEGRAM_BATCH_SIZE:-5}
      - TELEGRAM_SEND_CRON=${TELEGRAM_SEND_CRON:-0 */4 * * *}
      - RSS_FETCH_CRON=${RSS_FETCH_CRON:-0 * * * *}
      - AI_SUMMARY_CRON=${AI_SUMMARY_CRON:-0 */3 * * *}
      - AI_SUMMARY_BATCH_SIZE=${AI_SUMMARY_BATCH_SIZE:-10}
      - PODCAST_GEN_CRON=${PODCAST_GEN_CRON:-0 */6 * * *}
      - PODCAST_GEN_BATCH_SIZE=${PODCAST_GEN_BATCH_SIZE:-5}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - podcast_data:/app/public/podcasts
    networks:
      - veille-network

  # Cron service for scheduled tasks
  cron:
    build:
      context: .
      dockerfile: Dockerfile.cron
    container_name: veille-cron
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-veille_user}:${POSTGRES_PASSWORD:-veille_password}@postgres:5432/${POSTGRES_DB:-veille_db}
      - GOOGLE_GENAI_API_KEY=${GOOGLE_GENAI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - ELEVENLABS_EN_VOICE_ID=${ELEVENLABS_EN_VOICE_ID}
      - ELEVENLABS_FR_VOICE_ID=${ELEVENLABS_FR_VOICE_ID}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - TELEGRAM_BATCH_SIZE=${TELEGRAM_BATCH_SIZE:-5}
      - TELEGRAM_SEND_CRON=${TELEGRAM_SEND_CRON:-0 */4 * * *}
      - RSS_FETCH_CRON=${RSS_FETCH_CRON:-0 * * * *}
      - AI_SUMMARY_CRON=${AI_SUMMARY_CRON:-0 */3 * * *}
      - AI_SUMMARY_BATCH_SIZE=${AI_SUMMARY_BATCH_SIZE:-10}
      - PODCAST_GEN_CRON=${PODCAST_GEN_CRON:-0 */6 * * *}
      - PODCAST_GEN_BATCH_SIZE=${PODCAST_GEN_BATCH_SIZE:-5}
    depends_on:
      postgres:
        condition: service_healthy
      app:
        condition: service_started
    volumes:
      - podcast_data:/app/public/podcasts
    networks:
      - veille-network

  # Nginx web server and reverse proxy
  nginx:
    image: nginx:alpine
    container_name: veille-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
      - podcast_data:/var/www/podcasts:ro
    depends_on:
      - app
    networks:
      - veille-network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot for SSL certificate management
  certbot:
    image: certbot/certbot
    container_name: veille-certbot
    restart: unless-stopped
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - veille-network

volumes:
  postgres_data:
  podcast_data:

networks:
  veille-network:
    driver: bridge