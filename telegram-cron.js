/**
 * Script pour configurer une t√¢che cron d'envoi Telegram
 * 
 * Ce script configure une t√¢che cron qui ex√©cute le job Telegram
 * selon la fr√©quence d√©finie dans la variable d'environnement TELEGRAM_SEND_CRON
 */

const cron = require('node-cron');
const { exec } = require('child_process');
const path = require('path');
require('dotenv').config();

// Configuration
const TELEGRAM_SEND_CRON = process.env.TELEGRAM_SEND_CRON || '0 */4 * * *'; // Par d√©faut toutes les 4 heures

console.log(`üîî Configuration du job Telegram avec schedule: ${TELEGRAM_SEND_CRON}`);

// Fonction pour ex√©cuter le job
function runTelegramJob() {
  console.log(`‚è∞ Ex√©cution du job Telegram √† ${new Date().toISOString()}`);
  
  exec('node telegram-sender.js', {
    cwd: path.resolve(__dirname),
  }, (error, stdout, stderr) => {
    if (error) {
      console.error(`‚ùå Erreur lors de l'ex√©cution du job Telegram: ${error.message}`);
      return;
    }
    if (stderr) {
      console.error(`‚ö†Ô∏è Stderr: ${stderr}`);
      return;
    }
    console.log(`‚úÖ ${stdout}`);
  });
}

// Configuration de la t√¢che cron
if (cron.validate(TELEGRAM_SEND_CRON)) {
  cron.schedule(TELEGRAM_SEND_CRON, runTelegramJob, {
    scheduled: true,
    timezone: "Europe/Paris"
  });
  
  console.log('‚úÖ Job Telegram configur√© avec succ√®s!');
  console.log(`‚è±Ô∏è Prochaines ex√©cutions (approximatives):`);
  
  // Afficher les 3 prochaines ex√©cutions (approximatif)
  const task = cron.getTasks()[0];
  const now = new Date();
  let nextDate = new Date(now);
  
  for (let i = 0; i < 3; i++) {
    nextDate = task.nextDate(nextDate).toDate();
    console.log(`   ${i+1}. ${nextDate.toLocaleString()}`);
  }
  
  console.log('\nüìù Le job sera ex√©cut√© √† ces moments. Appuyez sur Ctrl+C pour arr√™ter.\n');
  
  // Ex√©cuter imm√©diatement pour tester
  console.log('üöÄ Ex√©cution imm√©diate du job pour test...');
  runTelegramJob();
} else {
  console.error(`‚ùå Format de cron invalide: ${TELEGRAM_SEND_CRON}`);
  process.exit(1);
}
